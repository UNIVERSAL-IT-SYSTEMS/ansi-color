#!/bin/bash
# ----------------------------------------------------------------------------
# @file color
# Return ANSI color escape sequences.
# Ref: http://www.faqs.org/docs/abs/HTML/colorizing.html,
# http://isthe.com/chongo/tech/comp/ansi_escapes.html
# Inspired by Moshe Jacobson <moshe@runslinux.net>
# @author Alister Lewis-Bowen [alister@different.com]
# ----------------------------------------------------------------------------

COLORS=( black red green yellow blue magenta cyan white );
NUM_COLORS=${#COLORS[@]};
TREATMENTS=( nm normal bd bold ft faint st standout ul underline bk blink rv reversevideo iv invisible );
NUM_TREATMENTS=${#TREATMENTS[@]};

# Function: Help
# ----------------------------------------------------------------------------

function help {
	echo;
	echo "$(color bd)Conveniently named ANSI escape sequences for your shell scripts.$(color)";
	echo;
	echo 'Usage:';
	echo "$(color bd)color$(color) [$(color ul)treatment]$(color) [[lt]$(color ul)fgcolor$(color)] [$(color ul)bgcolor$(color)]";
	echo "$(color bd)color$(color) list";
	echo;
	echo 'where:';
	echo -n "$(color ul)fgcolor$(color) and $(color ul)fgcolor$(color) are one of ";
	for ((i=0;i<${NUM_COLORS};i++)); do
		echo -n "$(color ${COLORS[${i}]})${COLORS[${i}]}$(color) ";
	done;
	echo;
	echo -n "$(color ul)treatment$(color) can be any of ";
	for ((i=0;i<${NUM_TREATMENTS};i++)); do
		echo -n "$(color ${TREATMENTS[${i}]})${TREATMENTS[${i}]}$(color) ";
	done;
	echo;
	echo "Preceed the $(color ul)fgcolor$(color) with $(color bd)lt$(color) to use a bold color."
	echo "$(color bd)color off$(color) or $(color bd)color$(color) resets to default colors and text treatments.";
	echo "$(color bd)color list$(color) displays all possible color combinations.";
	echo;
	echo 'Examples:';
	echo '  echo "$(color ul)Underlined text$(color off)"';
	echo 'results in:';
	echo "  $(color ul)Underlined text$(color off)";
	echo;
	echo '  echo "Make $(color rv)this$(color nm) reverse video text$(color off)"';
	echo 'results in:';
	echo "  Make $(color rv)this$(color nm) reverse video text$(color off)";
	echo;
	echo '  echo "$(color white blue) White text on a blue background $(color)"';
	echo 'results in:';
	echo "  $(color white blue) White text on a blue background $(color)";
	echo;
	echo '  echo "$(color ltyellow green) lt prefix on the yellow text text $(color off)"';
	echo 'results in:';
	echo "  $(color ltyellow green) lt prefix on the yellow text text $(color off)";
	echo;
	echo '  echo "$(color bold blink red yellow) Blinking bold red text on a yellow background $(color)"';
	echo 'results in:';
	echo "  $(color bold blink red yellow) Blinking bold red text on a yellow background $(color)";
	echo;
	echo;
	echo -n "Note that results may vary with these standard ANSI escape sequences because of the different configurations of terminal emulators. ";
	echo;
	exit 1;
}

# Function: List text treatments and colors
# ----------------------------------------------------------------------------

function list {

	echo;
	echo "$(color bd)These are the possible combinations of colors I can generate. ";
	echo "$(color nm)Since terminal color settings vary, $(color ul)the expected output may vary$(color).";
	echo;
	
	for ((bg=0;bg<${NUM_COLORS};bg++)); do
		echo "${COLORS[${bg}]}:";
			for ((fg=0;fg<${NUM_COLORS};fg++)); do
				echo -n "$(color ${COLORS[${fg}]} ${COLORS[${bg}]}) ${COLORS[${fg}]} $(color) ";
			done;
			echo;
		echo;
	done;
	
	exit 1;
}

# Function: Test if color
# ----------------------------------------------------------------------------

function _isColor () {
  if [ -n "$1" ]; then
	  for ((i=0;i<${NUM_COLORS};i++)); do
	  	normalize=${1#lt};
	    if [ "$normalize" = ${COLORS[${i}]} ]; then return 1; fi;
		done;
	fi;
	return 0;
}

# Function: Test if text treatment
# ----------------------------------------------------------------------------

function _isTreatment () {
  if [ -n "$1" ]; then
	  for ((i=0;i<${NUM_TREATMENTS};i++)); do
	    if [ "$1" = ${TREATMENTS[${i}]} ]; then return 1; fi;
		done;
		if [ "$1" = off ]; then return 1; fi;
	fi;
	return 0;
}

# Parse input arguments
# ----------------------------------------------------------------------------

if [[ "$1" = '-h' || "$1" = '--help' ]]; then help; fi;
if [ "$1" = list ];                      then list; fi;
if [[ "$1" = off || -z "$1" ]];          then tput sgr0; exit 0; fi;

while (( "$#" )); do

	_isColor $1;
	if [ $? -eq 1 ]; then
		if [ "$FG" = '' ]; then 
			FG=$1;
		else
		  if [ "$BG" = '' ]; then
		  	BG=$1;
		  else
		  	error="I see more than two colors. Type color -h for more information.";
		  fi;
		fi;
	else
		_isTreatment $1;
		if [ $? -eq 1 ]; then
			TT=("${TT[@]}" $1);
		else
			error="I don't recognize '$1'. Type color -h for more information.";
		fi;
	fi;
	
	shift;
	
done;

if [ "$error" != '' ]; then
	echo $(color bold red)color: $error$(color); exit 1;
fi;

# Text treatments
# ----------------------------------------------------------------------------

for ((i=0;i<${#TT[@]};i++)); do
	if [[ "${TT[${i}]}" = nm || "${TT[${i}]}" = normal ]];       then codes=("${codes[@]}" 0); fi;
	if [[ "${TT[${i}]}" = bd || "${TT[${i}]}" = bold ]];         then codes=("${codes[@]}" 1); fi;
	if [[ "${TT[${i}]}" = ft || "${TT[${i}]}" = faint ]];        then codes=("${codes[@]}" 2); fi;
	if [[ "${TT[${i}]}" = st || "${TT[${i}]}" = standout ]];     then codes=("${codes[@]}" 3); fi;
	if [[ "${TT[${i}]}" = ul || "${TT[${i}]}" = underline ]];    then codes=("${codes[@]}" 4); fi;
	if [[ "${TT[${i}]}" = bk || "${TT[${i}]}" = blink ]];        then codes=("${codes[@]}" 5); fi;
	if [[ "${TT[${i}]}" = rv || "${TT[${i}]}" = reversevideo ]]; then codes=("${codes[@]}" 7); fi;
	if [[ "${TT[${i}]}" = iv || "${TT[${i}]}" = invisible ]];    then codes=("${codes[@]}" 8); fi;
done;

# Forground colors
# ----------------------------------------------------------------------------

if [ `expr "$FG" : 'lt'` -eq 2 ]; then codes=("${codes[@]}" 1); fi;

if [ "$FG" = black ];   then codes=("${codes[@]}" 30); fi;
if [ "$FG" = red ];     then codes=("${codes[@]}" 31); fi;
if [ "$FG" = green ];   then codes=("${codes[@]}" 32); fi;
if [ "$FG" = yellow ];  then codes=("${codes[@]}" 33); fi;
if [ "$FG" = blue ];    then codes=("${codes[@]}" 34); fi;
if [ "$FG" = magenta ]; then codes=("${codes[@]}" 35); fi;
if [ "$FG" = cyan ];    then codes=("${codes[@]}" 36); fi;
if [ "$FG" = white ];   then codes=("${codes[@]}" 37); fi;

# Background colors
# ----------------------------------------------------------------------------

if [ "$BG" = black ];   then codes=("${codes[@]}" 40); fi;
if [ "$BG" = red ];     then codes=("${codes[@]}" 41); fi;
if [ "$BG" = green ];   then codes=("${codes[@]}" 42); fi;
if [ "$BG" = yellow ];  then codes=("${codes[@]}" 43); fi;
if [ "$BG" = blue ];    then codes=("${codes[@]}" 44); fi;
if [ "$BG" = magenta ]; then codes=("${codes[@]}" 45); fi;
if [ "$BG" = cyan ];    then codes=("${codes[@]}" 46); fi;
if [ "$BG" = white ];   then codes=("${codes[@]}" 47); fi;

# Assemble and echo the ANSI escape sequence
# ----------------------------------------------------------------------------

for ((i=0;i<${#codes[@]};i++)); do
	if [ "$seq" != '' ]; then seq=$seq';'; fi;
	seq=$seq${codes[${i}]};
done;

echo -en '\033['${seq}m;

exit 0;